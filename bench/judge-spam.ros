#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(defparameter *load-list* '(:cl-fad :cl-naive-bayes :trivial-shell :cl-ppcre :anaphora))

(eval-when (:execute)
  (dolist (target *load-list*)
    (ql:quickload target))
  (use-package :anaphora))

(defparameter *ham* "easy_ham")
(defparameter *spam* "spam")

(defparameter *work-dir* "./work")
(defparameter *ham-dir* (format nil "~A/~A" *work-dir* *ham*))
(defparameter *spam-dir* (format nil "~A/~A" *work-dir* *spam*))

(defun ensure-env ()
  (labels ((exists-dir ()
             (cl-fad:directory-exists-p (format nil "~A/~A/" *work-dir* *ham*))))
    (if (exists-dir)
     (return-from ensure-env t))
    (format t "Please wait for downloading and processing test data...~%")
    (trivial-shell:shell-command
     (format nil "./prepare.sh ~A ~A ~A" *work-dir* *ham* *spam*))
    (exists-dir)))

; very naive!!
(defun tokenize-mail (file)
  (with-open-file (in file :direction :input)
    (let (line word-lst)
      (loop while (setq line (read-line in nil)) do
           (setf word-lst (append (ppcre:split "\\s+" line) word-lst)))
      word-lst)))

(defun learn-a-file (store category file)
  (let ((word-lst (tokenize-mail file)))
    (cl-naive-bayes:learn-a-document store word-lst category)))

(defun learn-a-directory (store category dir ratio)
  (let ((file-lst (fad:list-directory dir)))
    (format t "Learn ~A mails: ~D~%" category (length file-lst))
    (dotimes (i (floor (* ratio (length file-lst))))
      (learn-a-file store category (nth i file-lst)))))

(defun test-a-directory (expected store directory offset-ratio ratio)
  (let* ((files (fad:list-directory directory))
         (num-all (length files))
         (count-used 0)
         (count-correct 0))
    (loop for i
       from (floor (* num-all offset-ratio))
       below (min num-all (floor (* num-all (+ offset-ratio ratio)))) do
         (let ((word-lst (tokenize-mail (nth i files))))
           (incf count-used)
           (if (equal (caar (cl-naive-bayes:sort-category-with-post-prob store word-lst))
                      expected)
               (incf count-correct))))
    (format t "~A: ~D/~D (~F)~%" expected count-correct count-used (/ count-correct count-used))))

(defmacro with-timer (title &body body)
  `(progn
     (format t "----- ~A -----~%" ,title)
     (time (progn ,@body
                  (format t "------~%")))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (unless (ensure-env)
    (format t "Failed to prepare the envinronment~%")
    (return-from main nil))
  (let* ((store (cl-naive-bayes:make-learned-store))
         (learn-ratio (aif (car argv) (read-from-string it) 0.5))
         (test-ratio (aif (cadr argv) (read-from-string it) 0.5))
         (test-offset-ratio (- 1 test-ratio)))
    (with-timer "Learn"
      (learn-a-directory store "normal" *ham-dir* learn-ratio)
      (learn-a-directory store "spam" *spam-dir* learn-ratio))
    (with-timer "Test the identification rate"
      (test-a-directory "normal" store *ham-dir*
                        test-offset-ratio test-ratio)
      (test-a-directory "spam" store *spam-dir*
                        test-offset-ratio test-ratio))))
